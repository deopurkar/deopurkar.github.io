#+title: Styling
#+author: Anand Deopurkar
#+property: header-args:scss :tangle "css/main.scss" :eval no :mkdirp yes
#+property: header-args:javascript :tangle "js/collapsibility.js" :eval no :mkdirp yes

The CSS is adapted from [[https://github.com/asilata/asilata.github.io/][Asilata Bapat]].

* Colours
:PROPERTIES:
:ID:       a54a58d4-feec-474f-b872-46f194d0c1ed
:END:
First we define some auxiliary [[https://sass-lang.com/documentation/at-rules/mixin][mixins]] to use later, such as for alternately coloured table rows.
#+begin_src scss
  @mixin alternate-rows($color) {
      table {
          tbody > tr:nth-child(odd){
              background: $color;
          }
      }
  }
#+end_src
Next we define the colour options for all components of the page.
We do this via a [[https://sass-lang.com/documentation/at-rules/mixin][mixin]] called ~theme~, which uses the following variables:
- ~bg~, ~bg-faded~ :: background colour and faded version,
- ~fg~, ~fg-faded~ :: foreground text colour and faded version,
- ~link~, ~link-faded~ :: link colour and faded version,
- ~titles~ :: colour for title underlines,
- ~code~ :: colour for verbatim text/code snippets
- ~fg-select~, ~bg-select~ :: foreground and background colour for selected text
#+begin_src scss
  @mixin theme($bg, $bg-faded, $fg, $fg-faded, $link, $link-faded, $titles, $code, $bg-select: $titles, $fg-select: $bg-faded) {
      ,* { color: $fg; }
      body {
          background-color: $bg;
          ::-moz-selection {
              background-color: $bg-select;
              color: $fg-select;
          }
          ::-selection {
              background-color: $bg-select;
              color: $fg-select;
          }
      }
      a, a:active, a:visited { color: $link;}
      a:hover { color: $link-faded; }
      code { color: $code; }
      h1, h2, h3, h4, h5, h6 {
          border-bottom: 0.15em solid $titles;
          display: inline-block;
          padding-top: 0.5em;
          margin: 0em;
          padding-bottom: 0.25em;
          a, a:active, a:visited {
              color: $titles;
          }
          a:hover {
              background-color: $bg-faded;
              text-decoration: none; 
          }
      }
      header {
          a, a:active, a:visited {
              color: $fg;
          }
          a.active {
              color: $titles;
          }
          a:hover {
              color: $titles;
              background-color: $bg;
              text-decoration: none;
          }
      }
      footer {
          color: $fg-faded;
          border-color: $fg-faded;
          a, a:active, a:visited { color: $link-faded; }
      }
  
      #mypicture {
          border-color: $fg-faded;
      }
  
      #postamble {
          border-top: 0em;
      }
  }
#+end_src
Now we set some predefined palettes.
Later on we can just include the one we want.
#+begin_src scss
  // Palette based on Solarized theme (just as an example)
  // $base03:    #002b36;
  // $base02:    #073642;
  // $base01:    #586e75;
  // $base00:    #657b83;
  // $base0:     #839496;
  // $base1:     #93a1a1;
  // $base2:     #eee8d5;
  // $base3:     #fdf6e3;
  // $yellow:    #b58900;
  // $orange:    #cb4b16;
  // $red:       #dc322f;
  // $magenta:   #d33682;
  // $violet:    #6c71c4;
  // $blue:      #268bd2;
  // $cyan:      #2aa198;
  // $green:     #859900;
  
  @mixin solarized-light {
      @include theme(#fdf6e3, #eee8d5, #657b83, #93a1a1, #268bd2, #2aa198, #cb4b16, #d33682);
  }
  
  @mixin alifbepe {
      @include theme(#fffdfc, #c7bba8, #000, #000, #000, #d05a5b, #d05a5b, #000);
  }
  
  @mixin solarized-dark {
      @include theme(#002b36, #073642, #839496, #586e75, #268bd2, #2aa198, #cb4b16, #859900);
  }
  
  @mixin zenburn {
      @include theme(#3F3F3F, #4F4F4F, #DCDCCC, #656555, #8CD0D3, #7CB8BB, #CC9393, #7F9F7F);
  }
  
  @mixin flatui {
      @include theme(#ecf0f1, #dfe4ea, #34495e, #7f8c8d, #2492db, #9b59b6, #0a74b9, #8e44ad);
  }
  
  @mixin bespoke-light {
      @include theme(#fffef9, #eceff1, #282b35, #727d97, #303db4, #30608c, #940b96, #00796b);
  }
  
  @mixin print {
      @include theme(#fff, #fff, #000, #000, #000, #000, #000, #000);
  }
#+end_src

* Main CSS
:PROPERTIES:
:ID:       3d104ae3-dfeb-4666-b672-063ac81e03b7
:END:
We come to the main part of the CSS code, namely the positioning and layout options, as well as the font options.
First we define the variables for the title font and the body font.
#+begin_src scss
  // Fonts
  $title-font: 'Atkinson Hyperlegible';
  $body-font: 'Atkinson Hyperlegible';
#+end_src
Next we use media queries to set breakpoints for various screen sizes, which then influence the layout of the page.
The layout changes are mainly made via [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][CSS flexbox]].
#+begin_src scss
  @media screen and (max-width: 480px) {
      body {
          max-width:95%;
          font-size:100%;
          line-height: 1em;
      }
  }
  @media screen and (min-width: 480px) {
      body {
          max-width:80%;
          line-height: 1.2em;
      }
  }
  @media screen and (min-width: 550px) {
      body {
          .intro {
              flex-direction: row-reverse;
          }
          line-height: 1.2em;
      }
  }
  @media screen and (min-width: 1000px) {
      body {
          max-width:1000px;
          line-height: 1.5em;
          header {
              flex-direction: row;
          }
      }
  }
  body {
      font-family: $body-font, sans-serif;
      margin-top: 0em;
      margin-left:auto;
      margin-right:auto;
      line-height:1.5em;
  }
#+end_src
Style links. Remember that the colours have already been styled via a theme mixin.
#+begin_src scss
  ,* a {
      text-decoration: underline;
  }
  
#+end_src
Style headings, lists, and figures.
#+begin_src scss
  h1, h2, h3, h4 {
      font-family: $title-font, sans-serif;
      font-weight:lighter;
      margin-bottom: 0em;
  }
  li {
      margin-top: 0.5em;
      margin-bottom: 0.5em;
  }
  dl {
      display: grid;
      grid-template-columns: max-content auto;
      gap: 10px 0px;
  }
  dt {
      grid-column-start: 1;
  }
  dd {
      grid-column-start: 2;
  }
  
  figure {
      padding: 0em;
      margin: 0em;
  }
  
#+end_src

We come to the main layout styling for the header and body.
We begin with a [[https://sass-lang.com/documentation/style-rules/placeholder-selectors][placeholder selector]] to decrease font size.
#+begin_src scss
  %small {
      font-size: 80%;
  }
#+end_src
Now style the title and intro.
#+begin_src scss
  .title {
      font-family: $title-font;
      line-height: 1.5em;
  }
  .intro {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
  }
#+end_src
Footer style and other miscellany.
#+begin_src scss
  footer {
      @extend %small;
      border-top: 0.1em dotted;
      margin-top:2em;
      padding-top:0.3em;
  }
  #mypicture {
      width: 10em;
      @media screen and (min-width: 960px) {
          width: 15em;
      }
      @media screen and (max-width: 480px) {
          margin-left: 0;
      }
  }
  #table-of-contents {
      float: left;
      padding-right: 1em;
      margin-right: 1em;
      margin-bottom: 1em;
      h2 {
          display: none;
      }
      ul {
          list-style-type: none;
          padding: 0em;
          margin: 0em;
      }
      li {
          margin-top: 0em;
          margin-bottom: 1em;
      }
  }
  
  #postamble {
      @extend %small;
      margin-top: 1em;
      text-align: right;
  }
  
  .container::after {
      content: "";
      clear: both;
      display: table;
  }
#+end_src

Include the colour themes previously defined.  
#+begin_src scss
  @include alifbepe;

  // Print stylesheet
  @media print {
      footer, nav {display:none;}
      width: 100%;
      margin: 0px;
      padding: 0px;
      a:after {
          content: " '(' attr(href) ') '";
      }
      @include print;
  }
#+end_src

Finally, we style collapsible and collapsed headlines.
#+begin_src scss
  .collapsible{
      cursor: pointer;
      border-bottom-width: 0.15em;
      &:before {
          content: '- ';
      }
  }
  .collapsed{
      cursor: pointer;
      border-bottom-width: 0.15em;
      &:before {
          content: '+ ';
      }
  }
#+end_src

* Javascript
:PROPERTIES:
:ID:       aeacc433-b46d-4f38-bdaf-803e879ce98d
:END:
The following script adds collapsible elements.
It works as follows.  Suppose we have a part of the page of the form

Headline
Content

and we wish to fold/unfold Content when headline is clicked.
Then we simply add the class "collapsible" or "collapsed" to Headline.
On clicking the Headline, the javascript will toggle the visibility of Content and also toggle the class name of Headline between "collapsible" and "collapsed".

#+begin_src javascript 
  document.addEventListener("DOMContentLoaded", function () {
      var headlines = document.querySelectorAll(".collapsible");
      for (var i = 0; i < headlines.length; i++) {
          addCollapsiblility(headlines[i], true);
      }
  
      var collapsedHeadlines = document.querySelectorAll(".collapsed");
      for (var i = 0; i < collapsedHeadlines.length; i++) {
          addCollapsiblility(collapsedHeadlines[i], false);
      }
  });
  
  function addCollapsiblility(headline, visible){
      headline.addEventListener("click", toggleVisibilityOfNext);
      var parentElement = headline.parentElement;
      var childrenElements = parentElement.children;
      var isVisible = visible;
  
      for (var i = 1; i < childrenElements.length; i++) {
          var content = childrenElements[i];
          if (isVisible) {
              content.style.display = "block";
          } else {
              content.style.display = "none";
          }
      }
  
      function toggleVisibilityOfNext (){
          if (isVisible){
              headline.classList.remove("collapsible");
              headline.classList.add("collapsed");
              for (var i = 1; i < childrenElements.length; i++) {
                  var content = childrenElements[i];
                  content.style.display = "none";
              }
              isVisible = false;
          } else {
              headline.classList.remove("collapsed");
              headline.classList.add("collapsible");
              for (var i = 1; i < childrenElements.length; i++) {
                  var content = childrenElements[i];
                  content.style.display = "block";
              }
              isVisible = true;
          }
      }
  }
#+end_src


* Tangling etc
Tangle the code from this file and then compile it to css.
#+name: tangle-and-compile
#+begin_src emacs-lisp :results silent :tangle no
  (org-babel-tangle)
  (shell-command "cd css; sassc main.scss main.css")
#+end_src
