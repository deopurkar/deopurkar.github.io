#+title: Styling
#+author: Anand Deopurkar
#+property: header-args:scss :tangle "css/main.scss" :eval no :mkdirp yes
#+property: header-args:javascript :tangle "js/collapsibility.js" :eval no :mkdirp yes

The CSS is adapted from [[https://github.com/asilata/asilata.github.io/][Asilata Bapat]].

* Colour theme
We define some auxiliary [[https://sass-lang.com/documentation/at-rules/mixin][mixins]] to use later, such as for alternately coloured table rows.
#+begin_src scss
  @mixin alternate-rows($color) {
      table {
          tbody > tr:nth-child(odd){
              background: $color;
          }
      }
  }
#+end_src

Next we define the colour options for all components of the page.
We do this via a [[https://sass-lang.com/documentation/at-rules/mixin][mixin]] called ~theme~, which uses the following variables:
- ~canvas~ :: Background colour
- ~canvas-pop~ :: Slightly emphasised canvas colour
- ~writing~ :: Foreground colour
- ~writing-pop~ :: Colour used for "pop"
#+begin_src scss
  @mixin theme($canvas, $canvas-pop, $writing, $writing-pop){
      ,* { color: $writing; }
      body {
  	column-rule: 1px solid $canvas-pop;
          background-color: $canvas;
          ::-moz-selection {
              background-color: $canvas-pop;
          }
          ::-selection {
              background-color: $canvas-pop;
          }
  	a:hover {
  	    color: $writing-pop;
  	}
      }
      #table-of-contents a {
  	border-bottom: 0.15em solid $writing-pop;
      }
      h1, h2, h3, h4, h5, h6 {
  	border-top-color: $canvas-pop;
  	text-decoration: underline 0.15em $writing-pop;
      }
      h2 {
  	padding-top: 20px;
  	border-top: 1px solid $canvas-pop;
      }
      footer {
          color: $canvas-pop;
  	border-top: 1px solid $canvas-pop;
      }

      #mypicture {
          border-color: $canvas-pop;
      }

      #postamble {
  	border-top: 1px solid $canvas-pop;
      }
  }
#+end_src
Now we set some predefined palettes.
Later on we can just include the one we want.
#+begin_src scss
  // Palette based on Solarized theme (just as an example)
  // $base03:    #002b36;
  // $base02:    #073642;
  // $base01:    #586e75;
  // $base00:    #657b83;
  // $base0:     #839496;
  // $base1:     #93a1a1;
  // $base2:     #eee8d5;
  // $base3:     #fdf6e3;
  // $yellow:    #b58900;
  // $orange:    #cb4b16;
  // $red:       #dc322f;
  // $magenta:   #d33682;
  // $violet:    #6c71c4;
  // $blue:      #268bd2;
  // $cyan:      #2aa198;
  // $green:     #859900;

  @mixin alifbepe {
      @include theme(#fffdfc, #c7bba8, #000, #d05a5b);
  }

  @mixin autumn {
      @include theme(#fbf6ee, #fac591,#060000,#f87d5b); 
  }
#+end_src

* Main CSS
:PROPERTIES:
:ID:       3d104ae3-dfeb-4666-b672-063ac81e03b7
:END:
We come to the main part of the CSS code, namely the positioning and layout options, as well as the font options.
First we define the variables for the title font and the body font.
#+begin_src scss
  // Fonts
  $title-font: 'Atkinson Hyperlegible';
  $body-font: 'Atkinson Hyperlegible';
  $hl-font: 'B612', monospace; 
#+end_src

We use media queries to slighlty reduce the line height for small screens.
Otherwise, we use a multi-column layout width columns.
#+begin_src scss
  @media screen and (max-width: 480px) {
      body {
  	font-size: 90%;
          line-height: 1em;
  	max-width: 95%;
      }
  }
  html {
      scroll-behavior: smooth;
  }
  body {
      font-family: $body-font, sans-serif;
      margin-top: 0em;
      line-height: 1.5em;
      column-width: 30em;
      column-gap: 20px;
      max-width: 90%;
      margin-left: auto;
      margin-right: auto;
  }
#+end_src
Style links. Remember that the colours have already been styled via a theme mixin.
#+begin_src scss
  ,* a {
      text-decoration: underline;
  }
  
#+end_src
Style headings, lists, and figures.
#+begin_src scss
  h1, h2, h3, h4 {
      font-family: $hl-font;
      font-weight: normal;
      margin-top: 20px;
      margin-bottom: 20px;
      display: block;
  }
  h1, h2{
      column-span: all;
  }
  li {
      margin-top: 0.5em;
      margin-bottom: 0.5em;
  }
  dl {
      display: grid;
      grid-template-columns: max-content auto;
      gap: 10px 0px;
  }
  dt {
      grid-column-start: 1;
  }
  dd {
      grid-column-start: 2;
  }

  figure {
      padding: 0em;
      margin: 0em;
  }

#+end_src

We begin with a [[https://sass-lang.com/documentation/style-rules/placeholder-selectors][placeholder selector]] to decrease font size.
#+begin_src scss
  %small {
      font-size: 80%;
  }
#+end_src
Style the title and intro.
#+begin_src scss
  .title {
      font-family: $title-font;
      line-height: 1.5em;
  }
  .intro {
      column-span: all;
      column-width: 18em;
      column-gap: 20px;
      margin-left: auto;
      margin-right: auto;
  }
#+end_src
Footer style and other miscellany.
#+begin_src scss
  footer {
      @extend %small;
      margin-top:2em;
      padding-top:0.3em;
  }
  #mypicture {
      width: 18em;
      margin-left: auto;
      margin-right: auto;
  }
  #table-of-contents {
      padding-right: 1em;
      margin-right: 1em;
      margin-bottom: 1em;
      display: inline-block;
      h2 {
          display: none;
      }
      ul {
          list-style-type: none;
          padding: 0em;
          margin: 0em;
      }
      li {
          margin-top: 0em;
          margin-bottom: 0.5em;
      }
      a {
  	text-decoration: none;
      }
  }

  #postamble {
      @extend %small;
      margin-top: 1em;
      text-align: right;
      column-span: all;
  }

  .container::after {
      content: "";
      clear: both;
      display: table;
  }
#+end_src

Include the colour themes previously defined.  
#+begin_src scss
  @include autumn;

  // Print stylesheet
  @media print {
      footer, nav {display:none;}
      width: 100%;
      margin: 0px;
      padding: 0px;
      a:after {
          content: " '(' attr(href) ') '";
      }
  }
#+end_src

Finally, we style collapsible and collapsed headlines.
#+begin_src scss
  .collapsible{
      cursor: pointer;
      &:before {
          content: '- ';
      }
  }
  .collapsed{
      cursor: pointer;
      &:before {
          content: '+ ';
      }
      &:after {
  	content: '...';
      }
  }
#+end_src

* Javascript
:PROPERTIES:
:ID:       aeacc433-b46d-4f38-bdaf-803e879ce98d
:END:
The following script adds collapsible elements.
It works as follows.  Suppose we have a part of the page of the form

Headline
Content

and we wish to fold/unfold Content when headline is clicked.
Then we simply add the class "collapsible" or "collapsed" to Headline.
On clicking the Headline, the javascript will toggle the visibility of Content and also toggle the class name of Headline between "collapsible" and "collapsed".

#+begin_src javascript 
  document.addEventListener("DOMContentLoaded", function () {
      var headlines = document.querySelectorAll(".collapsible");
      for (var i = 0; i < headlines.length; i++) {
          addCollapsiblility(headlines[i], true);
      }
  
      var collapsedHeadlines = document.querySelectorAll(".collapsed");
      for (var i = 0; i < collapsedHeadlines.length; i++) {
          addCollapsiblility(collapsedHeadlines[i], false);
      }
  });
  
  function addCollapsiblility(headline, visible){
      headline.addEventListener("click", toggleVisibilityOfNext);
      var parentElement = headline.parentElement;
      var childrenElements = parentElement.children;
      var isVisible = visible;
  
      for (var i = 1; i < childrenElements.length; i++) {
          var content = childrenElements[i];
          if (isVisible) {
              content.style.display = "block";
          } else {
              content.style.display = "none";
          }
      }
  
      function toggleVisibilityOfNext (){
          if (isVisible){
              headline.classList.remove("collapsible");
              headline.classList.add("collapsed");
              for (var i = 1; i < childrenElements.length; i++) {
                  var content = childrenElements[i];
                  content.style.display = "none";
              }
              isVisible = false;
          } else {
              headline.classList.remove("collapsed");
              headline.classList.add("collapsible");
              for (var i = 1; i < childrenElements.length; i++) {
                  var content = childrenElements[i];
                  content.style.display = "block";
              }
              isVisible = true;
          }
      }
  }
#+end_src


* Tangling etc
Tangle the code from this file and then compile it to css.
#+name: tangle-and-compile
#+begin_src emacs-lisp :results silent :tangle no
  (org-babel-tangle)
  (shell-command "cd css; sassc main.scss main.css")
#+end_src
