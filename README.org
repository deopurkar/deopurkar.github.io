#+title: README
#+author: Anand Deopurkar
#+property: header-args :results silent
#+startup: noptag contents

This repository contains code that generates my personal website, https://deopurkar.github.io.
The code and design of the website is thanks to [[https://asilata.github.io][Asilata Bapat]].

* The content
The content for the website goes in the ~content/~ directory.
It is written as a collection of inter-linked org files.
An internal directory structure is supported.

* Building locally
We begin by creating an elisp file to build the webpage, as explained in [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][this post]].
I will tangle the following snippets of elisp code to a file called ~build.el~.

I will first initialise some libraries and use [[https://orgmode.org/manual/Publishing.html][ox-publish]] to publish the website.
Right now, the building happens locally, but eventually, the it should happen on github.

#+begin_src emacs-lisp :tangle "build.el"
  (message (emacs-version))
  (require 'ox-publish)
  (require 'subr-x)
#+end_src

Next I set the options for ~org-publish-project-alist~, as documented [[help:org-publish-project-alist][here]].
Currently I have the following projects.
- ~website-org~ :: generates all the content from org-mode files.
- ~website-static~ :: copies over all other files. 
- ~styling~ :: tangles and copies over all the files in the [[file:contents/styling][styling]] directory.
- ~pdfcv~ :: creates a pdf cv
  
#+begin_src emacs-lisp :tangle "build.el"
  (setq org-publish-project-alist
        '(("website-org"
           :base-directory "./content"  ;; This is where our files live
           :base-extension "org" ;; Publish only from org files
           :publishing-directory "./docs" ;; This is where the published files go
           :recursive t 
           :exclude "\#.*"   ;; Files beginning with \# are not processed.
           :publishing-function org-html-publish-to-html
           :section-numbers nil
           :with-broken-links mark
           :with-toc nil
           :with-title t
           :with-author t
           :with-special-strings t
           :with-smart-quotes t
           :with-emphasize t
           :with-drawers ("results")
           :html-head-include-default-style nil
           :html-head-include-scripts nil 
           :html-head "<link rel=\"stylesheet\" href=\"/css/main.css\"></link><link href=\"https://fonts.googleapis.com/css?family=Lora:400,400i,700,700i\" rel=\"stylesheet\"></link>"
           :html-preamble nil
           :html-postamble-format (("en" "Created by %c.  Last modified: %C.  <a href=\"https:github.com/deopurkar.github.io\">Source</a>"))
           :html-postamble t
           :auto-sitemap nil
           )
          ("pdfcv"
           :base-directory "./content"
           :exclude ".*"
           :include ["cv.org"]
           :publishing-directory "./docs"
           :publishing-function org-latex-publish-to-pdf
           :preparation-function do-not-include-links
           )
          ("website-static"
           :base-directory "./content"
           :base-extension ".*"
           :exclude "\#.*\\|.*\.org"
           :publishing-directory "./docs"
           :recursive t
           :publishing-function org-publish-attachment)
          ("styling"
           :base-directory "./content/#styling"
           :base-extension "css\\|js"
           :publishing-directory "./docs"
           :recursive t
           :preparation-function my/execute-files
           :publishing-function org-publish-attachment)
          ))
#+end_src
The variable ~cv-include-links~ used above controls whether links should be included in the cv.
#+begin_src elisp :tangle "build.el"
  (defvar cv-include-links t
    "Should links be included while processing cv.org")
  (defun do-not-include-links (propslist)
    (setq cv-include-links nil))
#+end_src


The following function executes all the org files from the base directory.
#+begin_src emacs-lisp :tangle "build.el"
  (defun my/execute-files (proplist)
    (let ((files
           (directory-files-recursively
            (plist-get proplist ':base-directory)
            ".*org$")))  
      (mapcar (lambda (file)
                (with-current-buffer (find-file file)
                  (org-babel-execute-buffer)
                  ))
              files)))
#+end_src

Now publish!  
#+begin_src emacs-lisp :tangle "build.el"
  (setq org-confirm-babel-evaluate nil)
  (setq make-backup-files nil)
  (org-publish-all t)
  (message "Build complete!")
#+end_src

We also create a shell script to run the above lisp file.
#+begin_src shell :tangle "build.sh" :shebang "#!/bin/bash"
  emacs -Q --script build.el
#+end_src

* COMMENT Building on Github
/This is working, but missing some fringe functionality./
Once we have set up the tools to build the website locally, we can now use them to build the site automatically on Github.
Put the following code in ~.github/workflows/build.yml~.
Inspired by [[https://duncan.codes/posts/2019-09-03-migrating-from-jekyll-to-org/][this post]] and [[https://systemcrafters.net/publishing-websites-with-org-mode/automated-site-publishing/][this post]].
#+begin_src yaml :tangle ".github/workflows/build.yml" :mkdirp yes :eval no
  name: Build and publish to GitHub Pages
  on:
    push:
      branches:
      - master
  
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - name: Check out repository
        uses: actions/checkout@v2
  
      - name: Add emacs ppa
        run: sudo add-apt-repository ppa:kelleyk/emacs --yes && sudo apt update --yes

      - name: Install emacs
        run: sudo apt install emacs27-nox --yes
  
      - name: Build website
        run: ./build.sh
  
      - name: Publish to gh-pages branch
        uses: JamesIves/github-pages-deploy-action@4.1.4
        if: success()
        with:
          branch: gh-pages
          folder: public
#+end_src

